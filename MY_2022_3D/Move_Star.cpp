#include <chrono>
#include <thread>
#include <string>
#include <iostream>
#include <cmath>
#include <GLFW/glfw3.h>
#include "MuSoenMath.h"
// #include <glm/glm.hpp>  //GLM에서 사용할 수 있는 행렬을 비롯한 여러 자료형을 가지고 있음
// #include <glm/gtc/matrix_transform.hpp> //행렬 변환에 사용되는 수항 함수들을 가지고 있음


#pragma comment(lib, "OpenGL32")

using namespace std;

chrono::system_clock::time_point startRenderTimePoint;
chrono::duration<double> renderDuration;

GLFWwindow* window;
bool isFirstFrame = true;


struct Vertex   //struct = 구조체      //구조체 = 여러 자료형을 가진 변수들을 하나로 묶어 자료형으로 사용할 수 있도록 정의
{
    vector3 pos; //벡터의 선언
    float r, g, b, a;

};

matrix3 translate(         //도형 이동

    1, 0, 0,
    0, 1, 0,
    0, 0, 1

);

matrix3 rotation(          //도형 회전

    cos(0), -sin(0), 0,
    sin(0), cos(0), 0,
    0, 0, 1

);

matrix3 scale(        //도형 크기 증가

    1, 0, 0,
    0, 1, 0,
    0, 0, 1

);

Vertex star[5];             // static mesh
Vertex transformedStar[5];  //화면에 그릴 오망성
Vertex circle[360];             // static mesh 
Vertex transformedCircle[360];  // 화면에 그려질 원

  //world 행렬이 될 transform

//<문제>////////전역변수 쓰는곳////////////////////////////////////////////////////////////

        //1. translate 를 프레임당 오른쪽으로 0.001씩 누적시켜서 물체를 이동해보세요.
        //2. Rotation 을 프레임당 1도씩 누적시켜서 물체를 회전시켜보세요.
        //3. Scale은 초당 0.01씩 최대 1.3배까지 늘어났다가 0.7배까지 줄어들도록 만드시오 (반복)
        //   (1.3배 이상이 되면 줄어들고 0.7배 이하가 되면 다시 늘어나게 만드시오)

float scale_default = 1.0f;           //기본 크기
float scale_plus = 1.01f;              //크기가 커질 때 쓰이는 변수
float scale_minus = 0.99f;           //크기가 작아질 때 쓰이는 변수

bool scale_change = true;                      //불값에 따라 크기가 커지고 작아진다.

matrix3 translate_move(         //도형 이동

    1,0,0,
    0,1,0,
    0.001,0,1

);

matrix3 rotation_move(          //도형 회전

    cos(2 * (3.14 / 180)), -sin(2 * (3.14 / 180)), 0,
    sin(2 * (3.14 / 180)), cos(2 * (3.14 / 180)), 0,
    0, 0, 1

);

matrix3 circle_scale_plus(        //도형 크기 증가

    1.01, 0, 0,
    0, 1.01, 0,
    0, 0, 1

);

matrix3 circle_scale_minus(       //도형 크기 감소

    0.99, 0, 0,
    0, 0.99, 0,
    0, 0, 1

);


//////////////////////////////////////////////////////////////////////////////////////////

void Init();
void Update();
void Release();

static void error_callback(int error, const char* description);
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods);

int main(void);


void Init()
{
    glfwSetErrorCallback(error_callback);
    if (!glfwInit())
        exit(EXIT_FAILURE);
    window = glfwCreateWindow(720, 720, "Simple example", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        exit(EXIT_FAILURE);
    }

    glfwMakeContextCurrent(window);
    glfwSetKeyCallback(window, key_callback);


    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glfwSwapInterval(1);

    startRenderTimePoint = chrono::system_clock::now();


    //object생성부
     /// Star(오망성) 생성
    int i = 0;
    for (float theta = 0; theta < 360; theta += 72)
    {

        star[i].pos.vec3[0][0] = -sin(theta*(3.14/180)) * 0.5f;
        star[i].pos.vec3[0][1] = cos(theta * (3.14 / 180)) * 0.5f;
        star[i].pos.vec3[0][2] = 1.0f;

        star[i].r = 0.3f;
        star[i].g = 0.0f;
        star[i].b = theta / 360.0f;
        star[i].a = 0.7f;


        transformedStar[i] = star[i];

        i++;
    }

    // 원 생성
    for (int theta = 0; theta < 360; theta++)
    {
        circle[theta].pos.vec3[0][0] = -sin(theta * (3.14 / 180)) * 0.5;
        circle[theta].pos.vec3[0][1] = cos(theta * (3.14 / 180)) * 0.5;
        circle[theta].pos.vec3[0][2] = 1.0f;

        circle[theta].r = 0.3f;
        circle[theta].g = 0.0f;
        circle[theta].b = (float)theta / 360.0f;
        circle[theta].a = 0.7f;

        transformedCircle[theta] = circle[theta];
    }



   
}

void Release()
{
    glfwDestroyWindow(window);
    glfwTerminate();
}
void Update()
{
    while (!glfwWindowShouldClose(window))
    {
        //Update로직
        //<문제>//////////////////////////////////////////////////////////////////////////////////

        //1. translate 를 프레임당 오른쪽으로 0.001씩 누적시켜서 물체를 이동해보세요.
        //2. Rotation 을 프레임당 1도씩 누적시켜서 물체를 회전시켜보세요.
        //3. Scale은 초당 0.01씩 최대 1.3배까지 늘어났다가 0.7배까지 줄어들도록 만드시오 (반복)
        //   (1.3배 이상이 되면 줄어들고 0.7배 이하가 되면 다시 늘어나게 만드시오)

        translate = translate * translate_move;         //translate_move 값을 계속 곱하여 도형을 이동시킴
        
        rotation = rotation * rotation_move;             //rotation_move 값을 계속 곱하여 도형을 회전시킴

        
        if (scale_change == true) {     // true일 때

            scale = scale * circle_scale_plus;                  //도형 크기 증가
            scale_default = scale_default * scale_plus;                                    //기본 도형 값에 증가한 수를 초기화 시킨다.

        }
        else if (scale_change == false) {       //false일 때

            scale = scale * circle_scale_minus;               //도형 크기 감소
            scale_default = scale_default * scale_minus;                                //기본 도형 값에 감소한 수를 초기화 시킨다.

        }

        if (scale_default >= 1.3f) {                                                                  //만약 기본 값이 1.3 이상이면

            scale_change = false;                                                                      //false 값으로 바꿔 크기를 작게 만든다.

        }
        else if (scale_default <= 0.7f) {                                                           //만약 기본 값이 0.7 이하면

            scale_change = true;                                                                       //true 값으로 바꿔 크기를 크게 만든다.

        }

        //////////////////////////////////////////////////////////////////////////////////////////

        for (int i = 0; i < 360; i++)
        {
            transformedCircle[i].pos = circle[i].pos * scale * rotation * translate;
        }

        for (int i = 0; i < 5; i++)
        {
            transformedStar[i].pos = star[i].pos * scale* rotation* translate;
        }



        //색 초기화
        glClearColor(.0f, 0.0f, 0.0f, 0.1f);
        glClear(GL_COLOR_BUFFER_BIT);

        //선두께
        glLineWidth(7.0f);
        //오망성 그리기
        glBegin(GL_LINE_STRIP);

        int a = 0;
        glColor4f(transformedStar[a].r, transformedStar[a].g, transformedStar[a].b, transformedStar[a].a);
        glVertex3f(transformedStar[a].pos.vec3[0][0], transformedStar[a].pos.vec3[0][1], 0.0f);
        a = 3;
        glColor4f(transformedStar[a].r, transformedStar[a].g, transformedStar[a].b, transformedStar[a].a);
        glVertex3f(transformedStar[a].pos.vec3[0][0], transformedStar[a].pos.vec3[0][1], 0.0f);
        a = 1;
        glColor4f(transformedStar[a].r, transformedStar[a].g, transformedStar[a].b, transformedStar[a].a);
        glVertex3f(transformedStar[a].pos.vec3[0][0], transformedStar[a].pos.vec3[0][1], 0.0f);
        a = 4;
        glColor4f(transformedStar[a].r, transformedStar[a].g, transformedStar[a].b, transformedStar[a].a);
        glVertex3f(transformedStar[a].pos.vec3[0][0], transformedStar[a].pos.vec3[0][1], 0.0f);
        a = 2;
        glColor4f(transformedStar[a].r, transformedStar[a].g, transformedStar[a].b, transformedStar[a].a);
        glVertex3f(transformedStar[a].pos.vec3[0][0], transformedStar[a].pos.vec3[0][1], 0.0f);

        a = 0;
        glColor4f(transformedStar[a].r, transformedStar[a].g, transformedStar[a].b, transformedStar[a].a);
        glVertex3f(transformedStar[a].pos.vec3[0][0], transformedStar[a].pos.vec3[0][1], 0.0f);
        glEnd();

        //원그리기
        glBegin(GL_LINE_STRIP);
        for (int theta = 0; theta < 360; theta++)
        {
            glColor4f(transformedCircle[theta].r, transformedCircle[theta].g, transformedCircle[theta].b, transformedCircle[theta].a);
            glVertex3f(transformedCircle[theta].pos.vec3[0][0], transformedCircle[theta].pos.vec3[0][1], 0.0f);
        }
        glEnd();



        //화면 스왑
        glfwSwapBuffers(window);
        glfwPollEvents();

        //렌더시간 측정
        renderDuration = chrono::system_clock::now() - startRenderTimePoint;
        startRenderTimePoint = chrono::system_clock::now();

        float fps = 1.0 / renderDuration.count();
        if (isFirstFrame == true)
        {
            isFirstFrame = false;
            continue;
        }
        if (renderDuration.count() < (1.0f / 60.0f))
            this_thread::sleep_for(chrono::milliseconds((int)(((1.0f / 60.0f) - renderDuration.count()) * 1000)));
        string fps_s = "FPS : " + to_string(fps);
        cout << fps_s << endl;

    }
}

static void error_callback(int error, const char* description)
{
    fputs(description, stderr);
}
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GL_TRUE);
}

int main(void)
{
    Init();
    Update();
    Release();

    exit(EXIT_SUCCESS);
}